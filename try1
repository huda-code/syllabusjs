 1-Hour Class Plan: "Let’s Talk Conditions!" (JavaScript for Kids)
📌 What You Need:
A browser console (or any online JS playground like replit, jsfiddle.net, or codepen.io)

Whiteboard or notepad

Enthusiastic energy 😄

🕒 Lesson Flow
⏰ 0–5 mins — Warm-Up
Script:

"Hey everyone! 👋 Today, we’re going to teach your computer how to make decisions — just like you do every day. Should I wear a jacket? Should I eat ice cream? Your computer asks the same kinds of questions using conditions! Ready? Let’s go!"

⏰ 5–10 mins — What is Control Flow?
Script:

"In coding, control flow is how a program runs from top to bottom — like a story. Sometimes we want to skip parts, repeat parts, or make decisions. Today we’ll focus on making decisions using 'if' statements."

Draw on the board:


Start → Step 1 → [ Is it raining? ] → Yes → Take umbrella
                                ↓ No → Go outside
⏰ 10–15 mins — First if Condition
Live Example in Console:


if (true) {
  console.log("This will run!");
}
Ask kids:

"What do you think will happen here? Why?"

Then explain:

"If the condition is true, the code inside the {} runs."

⏰ 15–25 mins — Truthy and Falsy Values
Script:

"Let’s see what JavaScript thinks is true or false!"

Type these one by one and ask them to guess what will happen:


if (1) { console.log('1 is true') }
if (0) { console.log('0 is true') }
if ('hello') { console.log('Text is true') }
if ('') { console.log('Empty string is true') }
if ([]) { console.log('Empty array is true') }
if (null) { console.log('null is true') }
Then explain:

Value	Is it true?
0	❌ false
1	✅ true
''	❌ false
'abc'	✅ true
[]	✅ true
null	❌ false

⏰ 25–35 mins — Relational Conditions
Script:

"Let’s try comparing values! Like checking if 5 is greater than 3."

Try these:


if (5 > 3) { console.log('Yes, 5 is greater') }
if (2 == '2') { console.log('Loose equal works') }
if (2 === '2') { console.log('Strict equal works') }
Explain difference:

== checks value

=== checks value and type

⏰ 35–45 mins — Silly Condition Demos 🤪
Use fun comparisons to keep them engaged:


if ('apple' === 'Apple') {
  console.log('Fruits match!')
} else {
  console.log('They don’t match!')
}
Try:


if (4 & 1) { console.log("Bitwise AND magic!") }
if ([1,2] == [1,2]) { console.log("Same arrays?") }
Explain that:

Arrays are not equal even if they look the same.

Bitwise is fun but advanced — just for curiosity!

⏰ 45–55 mins — Mini Game (Quiz Time!)
Play: “Truthy or Falsy?”

Give each student a paper or ask in chat:

Say a value — they respond:

"Truthy!" or "Falsy!"

Examples:

0

1

'hello'

''

null

[]

NaN

Keep score for fun!

⏰ 55–60 mins — Wrap Up & Homework
Script:

"Great job today! 🎉 We learned how JavaScript makes decisions using conditions. Your homework is to write 3 if-statements that print something funny or surprising. Try comparing numbers, strings, or even your name!"

Example:


if ('Hajira' === 'Hajira') {
  console.log('That’s my name!');
}
Let me know if you'd like a printable worksheet or Google Slides version!








// Control Flow
// 1. Sequential
// 2. Conditions
// 3. Iterations
what is this?


Great question!

This comment block:


// Control Flow
// 1. Sequential
// 2. Conditions
// 3. Iterations
is a high-level overview of "Control Flow" in programming — basically, how your program decides what to run and when.

Let’s break it down simply, especially for kids:

🧠 What is Control Flow?
Control flow means the order in which your code runs.

🔢 1. Sequential
This is the default flow.

Code runs line by line — top to bottom.

Example:


console.log("Step 1");
console.log("Step 2");
console.log("Step 3");
Output:
Step 1
Step 2
Step 3

❓ 2. Conditions
This is where your code makes decisions using if, else, etc.

"If this is true, then do something."

Example:


if (age > 10) {
  console.log("You’re older than 10!");
}
🔁 3. Iterations
This means repeating something using loops like for, while.

"Do this again and again until something happens."

Example:


for (let i = 1; i <= 5; i++) {
  console.log("I am loop number", i);
}
💡 Summary
Control flow = the "roadmap" of how your program runs:

Step-by-step (sequential),

Takes turns based on questions (conditions),

Repeats when needed (iterations).

Would you like a visual diagram or kid-friendly slide for this?







